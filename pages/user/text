<?php
            require_once '../../apps/ViewLontar.php';

            use EasyRdf\Sparql\Client;

            // SPARQL endpoint URL
            $endpoint = 'http://localhost:3030/pencarian_lontar/query';
            $sparql = new Client($endpoint);

            // Query untuk mengambil important keywords
            $importantKeywordsQuery = "
                PREFIX lontar: <http://www.semanticweb.org/sarasvananda/ontologies/2023/5/untitled-ontology-12#>

                SELECT ?keyword WHERE {
                    {
                        ?s lontar:title ?keyword .
                    } UNION {
                        ?s lontar:type ?keyword .
                    } UNION {
                        ?s lontar:subject ?keyword .
                    } UNION {
                        ?s lontar:classification ?keyword .
                    } UNION {
                        ?s lontar:language ?keyword .
                    } UNION {
                        ?s lontar:collation ?keyword .
                    } UNION {
                        ?s lontar:year ?keyword .
                    } UNION {
                        ?s lontar:length ?keyword .
                    } UNION {
                        ?s lontar:width ?keyword .
                    } UNION {
                        ?s lontar:resource ?keyword .
                    } UNION {
                        ?s lontar:createBy ?keyword .
                    } UNION {
                        ?s lontar:comeFrom ?keyword .
                    } UNION {
                        ?s lontar:saveIn ?keyword .
                    } UNION {
                        ?person lontar:author ?keyword .
                    } UNION {
                        ?origin lontar:area ?keyword .
                    } UNION {
                        ?origin lontar:regency ?keyword .
                    } UNION {
                        ?place lontar:placename ?keyword .
                    } UNION {
                        ?place lontar:location ?keyword .
                    }
                }
                ";
            $importantKeywordsResults = $sparql->query($importantKeywordsQuery);

            $importantKeywords = [];

            foreach ($importantKeywordsResults as $result) {
                $importantKeywords[] = $result->keyword->getValue();
            }

            if (isset($_POST['btn_keyword'])) {
                $key = $_POST['keyword'];
                // Encode data as JSON to pass to Python script
                $data = json_encode([
                    'keyword' => $key,
                    'stop_words' => $stopWords,
                    'important_keywords' => $importantKeywords
                ]);

                // Memanggil code python dengan data yang diencode sebagai argumen
                $command = escapeshellcmd("python nlp_processing.py " . escapeshellarg($data));
                $output = shell_exec("$command 2>&1");

                $keyword_baru = strtolower(trim($output));
                $keywords = explode(" ", $keyword_baru); // Memisahkan kata kunci yang dipisahkan oleh spasi

                if (!empty($keywords)) {
                    $filters = [];
                    foreach ($keywords as $keyword) {
                        $filters[] = "CONTAINS(LCASE(?title), '$keyword') ||
                          CONTAINS(LCASE(?author), '$keyword') ||
                          CONTAINS(LCASE(?year), '$keyword') ||
                          CONTAINS(LCASE(?type), '$keyword') ||
                          CONTAINS(LCASE(?subject), '$keyword') ||
                          CONTAINS(LCASE(?classification), '$keyword') ||
                          CONTAINS(LCASE(?collation), '$keyword') ||
                          CONTAINS(LCASE(?language), '$keyword') ||
                          CONTAINS(STR(?length), '$keyword') ||
                          CONTAINS(STR(?width), '$keyword') ||
                          CONTAINS(LCASE(?area), '$keyword') ||
                          CONTAINS(LCASE(?regency), '$keyword') ||
                          CONTAINS(LCASE(?location), '$keyword') ||
                          CONTAINS(LCASE(?placename), '$keyword')";
                    }

                    $filter_query = implode(" || ", $filters);

                    $query = "
                        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                        PREFIX lontar: <http://www.semanticweb.org/sarasvananda/ontologies/2023/5/untitled-ontology-12#>
                        
                        SELECT *
                        WHERE {
                            ?lontar lontar:title ?title;
                                    lontar:type ?type;
                                    lontar:subject ?subject;
                                    lontar:classification ?classification;
                                    lontar:language ?language;
                                    lontar:collation ?collation;
                                    lontar:year ?year;
                                    lontar:length ?length;
                                    lontar:width ?width;
                                    lontar:resource ?resource;
                                    lontar:createBy ?person;
                                    lontar:comeFrom ?origin;
                                    lontar:saveIn ?place.
                            ?person lontar:author ?author.
                            ?origin lontar:area ?area;
                                    lontar:regency ?regency.
                            ?place  lontar:placename ?placename;
                                    lontar:location ?location;
                                    lontar:hasSave ?lontar.
                            
                            FILTER ($filter_query)
                        }
                        ";
                } else {
                    echo "Error: Output from Python processing is empty.";
                }
            } else {
                $query = "SELECT *
                WHERE {
                    ?lontar lontar:title ?title;
                            lontar:type ?type;
                            lontar:subject ?subject;
                            lontar:classification ?classification;
                            lontar:language ?language;
                            lontar:collation ?collation;
                            lontar:year ?year;
                            lontar:length ?length;
                            lontar:width ?width;
                            lontar:resource ?resource;
                            lontar:createBy ?person;
                            lontar:comeFrom ?origin;
                            lontar:saveIn ?place.
                    ?person lontar:author ?author.
                    ?origin lontar:area	?area;
                            lontar:regency ?regency.
                    ?place  lontar:placename ?placename;
                            lontar:location ?location;
                            lontar:hasSave ?lontar.	
                }";
            }

            // pagination
            $jmlhDataPerHalaman = 10;
            $result = $sparql->query($query);
            $jumlahData = count($result);
            $jumlahHalaman = ceil($jumlahData / $jmlhDataPerHalaman); //round-> Pembulatan ke atas
            $halamanAktif = (isset($_GET['halaman'])) ? $_GET['halaman'] : 1;
            //halaman aktif
            $awalData = ($jmlhDataPerHalaman * $halamanAktif) - $jmlhDataPerHalaman;

            $hasil = $sparql->query($query . "LIMIT $jmlhDataPerHalaman OFFSET $awalData");
            // Memeriksa apakah ada hasil dari pencarian
            if (isset($hasil) && count($hasil) > 0) {
                foreach ($hasil as $data) :
            ?>


// $importantKeywords = [];

            // foreach ($importantKeywordsResults as $result) {
            //     $keyword = null;
            //     $keyword = $result->keyword->getValue();
            // }
            // $importantKeywords[] = $keyword;

            // foreach ($importantKeywordsResults as $result) {
            //     $keyword = null;
            //     // Memeriksa apakah nilai hasil adalah objek Resource
            //     if ($result->keyword instanceof EasyRdf\Resource) {
            //         // Memeriksa apakah objek resource terkait dengan graf
            //         if ($result->keyword->getGraph() !== null) {
            //             // Jika ya, gunakan label jika tersedia
            //             $label = $result->keyword->label();
            //             if ($label !== null) {
            //                 $keyword = $label;
            //             } else {
            //                 // Jika tidak ada label, gunakan URI sebagai nilai
            //                 $keyword = $result->keyword->getUri();
            //             }
            //         } else {
            //             // Jika tidak ada graf, gunakan URI sebagai nilai
            //             $keyword = $result->keyword->getUri();
            //         }
            //     } else {
            //         // Jika bukan, ambil nilainya langsung
            //         $keyword = $result->keyword->getValue();
            //     }
            //     $keywordsArray[] = $keyword;
            // }








            require_once '../../apps/ViewLontar.php';

            // Query untuk mengambil important keywords
            $importantKeywordsQuery = "
            PREFIX lontar: <http://www.semanticweb.org/sarasvananda/ontologies/2023/5/untitled-ontology-12#>
            
            SELECT ?keyword WHERE {
                {
                    ?s lontar:title ?keyword .
                } UNION {
                    ?s lontar:type ?keyword .
                } UNION {
                    ?s lontar:subject ?keyword .
                } UNION {
                    ?s lontar:classification ?keyword .
                } UNION {
                    ?s lontar:language ?keyword .
                } UNION {
                    ?s lontar:collation ?keyword .
                } UNION {
                    ?s lontar:year ?keyword .
                } UNION {
                    ?s lontar:length ?keyword .
                } UNION {
                    ?s lontar:width ?keyword .
                } UNION {
                    ?s lontar:resource ?keyword .
                } UNION {
                    ?s lontar:createBy ?keyword .
                } UNION {
                    ?s lontar:comeFrom ?keyword .
                } UNION {
                    ?s lontar:saveIn ?keyword .
                } UNION {
                    ?person lontar:author ?keyword .
                } UNION {
                    ?origin lontar:area ?keyword .
                } UNION {
                    ?origin lontar:regency ?keyword .
                } UNION {
                    ?place lontar:placename ?keyword .
                } UNION {
                    ?place lontar:location ?keyword .
                }
            }
            ";
            $importantKeywordsResults = $sparql->query($importantKeywordsQuery);

            // Ambil hasil query dan simpan dalam array
            $importantKeywords = [];
            foreach ($importantKeywordsResults as $result) {
                $importantKeywords[] = (string)$result->keyword;
            }

            if (isset($_POST['btn_keyword'])) {
                $key = $_POST['keyword'];

                // Encode data as JSON to pass to Python script
                $data = json_encode([
                    'keyword' => $key,
                    'important_keywords' => $importantKeywords
                ]);

                // Buat file sementara untuk menyimpan data JSON
                $tempFile = tempnam(sys_get_temp_dir(), 'data');
                file_put_contents($tempFile, $data);

                // Memanggil code python
                $command = escapeshellcmd("python processingNLP.py " . escapeshellarg($tempFile));
                $output = shell_exec("$command 2>&1");

                // Hapus file sementara setelah selesai
                if (file_exists($tempFile)) {
                    unlink($tempFile);
                }

                $keyword_baru = strtolower(trim($output));
                $keywords = explode(" ", $keyword_baru); // Memisahkan kata kunci yang dipisahkan oleh spasi

                if (!empty($keywords)) {
                    $sparql = new \EasyRdf\Sparql\Client('http://localhost:3030/pencarian_lontar/query');

                    // Buat filter untuk setiap kata kunci
                    $filters = [];
                    foreach ($keywords as $keyword) {
                        $filters[] = "CONTAINS(LCASE(?title), '$keyword') ||
                                      CONTAINS(LCASE(?author), '$keyword') ||
                                      CONTAINS(LCASE(?year), '$keyword') ||
                                      CONTAINS(LCASE(?type), '$keyword') ||
                                      CONTAINS(LCASE(?subject), '$keyword') ||
                                      CONTAINS(LCASE(?classification), '$keyword') ||
                                      CONTAINS(LCASE(?collation), '$keyword') ||
                                      CONTAINS(LCASE(?language), '$keyword') ||
                                      CONTAINS(STR(?length), '$keyword') ||
                                      CONTAINS(STR(?width), '$keyword') ||
                                      CONTAINS(LCASE(?area), '$keyword') ||
                                      CONTAINS(LCASE(?regency), '$keyword') ||
                                      CONTAINS(LCASE(?location), '$keyword') ||
                                      CONTAINS(LCASE(?placename), '$keyword')";
                    }

                    $filter_query = implode(" || ", $filters);

                    $query = "
                    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                    PREFIX lontar: <http://www.semanticweb.org/sarasvananda/ontologies/2023/5/untitled-ontology-12#>
                    
                    SELECT *
                    WHERE {
                        ?lontar lontar:title ?title;
                                lontar:type ?type;
                                lontar:subject ?subject;
                                lontar:classification ?classification;
                                lontar:language ?language;
                                lontar:collation ?collation;
                                lontar:year ?year;
                                lontar:length ?length;
                                lontar:width ?width;
                                lontar:resource ?resource;
                                lontar:createBy ?person;
                                lontar:comeFrom ?origin;
                                lontar:saveIn ?place.
                        ?person lontar:author ?author.
                        ?origin lontar:area ?area;
                                lontar:regency ?regency.
                        ?place  lontar:placename ?placename;
                                lontar:location ?location;
                                lontar:hasSave ?lontar.
                        FILTER ($filter_query)
                    }
                    ";

                    // Simpan hasil pencarian dalam sesi
                    $_SESSION['search_results'] = $result;
                    $_SESSION['search_keyword'] = $key;
                } else {
                    echo "Error: Output from Python processing is empty.";
                }
            } elseif (isset($_SESSION['search_results'])) {
                // Ambil hasil pencarian dari sesi
                $result = $_SESSION['search_results'];
                $key = $_SESSION['search_keyword'];
            } else {
                $query = "SELECT *
                WHERE {
                    ?lontar lontar:title ?title;
                            lontar:type ?type;
                            lontar:subject ?subject;
                            lontar:classification ?classification;
                            lontar:language ?language;
                            lontar:collation ?collation;
                            lontar:year ?year;
                            lontar:length ?length;
                            lontar:width ?width;
                            lontar:resource ?resource;
                            lontar:createBy ?person;
                            lontar:comeFrom ?origin;
                            lontar:saveIn ?place.
                    ?person lontar:author ?author.
                    ?origin lontar:area ?area;
                            lontar:regency ?regency.
                    ?place  lontar:placename ?placename;
                            lontar:location ?location;
                            lontar:hasSave ?lontar.    
                }";
            }

            // pagination
            $jmlhDataPerHalaman = 10;
            $result = $sparql->query($query);
            $jumlahData = count($result);
            $jumlahHalaman = ceil($jumlahData / $jmlhDataPerHalaman); //round-> Pembulatan ke atas
            $halamanAktif = (isset($_GET['halaman'])) ? $_GET['halaman'] : 1;
            //halaman aktif
            $awalData = ($jmlhDataPerHalaman * $halamanAktif) - $jmlhDataPerHalaman;

            $hasil = $sparql->query($query . "LIMIT $jmlhDataPerHalaman OFFSET $awalData");
            // Memeriksa apakah ada hasil dari pencarian
            if (isset($hasil) && count($hasil) > 0) {
                foreach ($hasil as $data) :





import json
import sys
import os
import csv
import nltk
from Sastrawi.Stemmer.StemmerFactory import StemmerFactory
from nltk.corpus import stopwords

# Fungsi untuk memuat stop words dari file CSV
def load_stop_words(csv_file):
    stop_words = set()
    with open(csv_file, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            stop_words.add(row['stopword'])
    return stop_words

# Path ke file CSV yang berisi stop words
csv_file_path = 'stop_words.csv'

# Memuat stop words dari file CSV
stop_words = load_stop_words(csv_file_path)

# Kamus sinonim sederhana
synonyms = {}

# Fungsi untuk memuat synonyms dari file CSV
def load_synonyms(csv_file):
    with open(csv_file, mode='r', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            keywords = row['keyword'].split(',')
            for keyword in keywords:
                synonyms[keyword.strip()] = row['synonyms']

# Path ke file CSV yang berisi synonyms
synonyms_csv_file = 'persamaan_kata.csv'

# Memuat synonyms dari file CSV
load_synonyms(synonyms_csv_file)

def replace_keyword(word):
    return synonyms.get(word, word)

def tokenize_input(keyword, important_keywords):
    try:
        # Konversi keyword ke lowercase
        lower_keyword = keyword.lower()

        # Tokenisasi keyword menjadi kata-kata individual
        tokens = lower_keyword.split()

        # Buat stemmer untuk bahasa Indonesia
        factory = StemmerFactory()
        stemmer = factory.create_stemmer()

        # Hapus stop words
        filtered_tokens = [token for token in tokens if token not in stop_words]

        # Lakukan stemming pada setiap kata
        stemmed_tokens = [stemmer.stem(token) for token in filtered_tokens]

        # Cari kata penting yang ada dalam input
        important_tokens = [token for token in stemmed_tokens if token in important_keywords]

        # Jika tidak ada kata penting yang ditemukan, ambil kata terakhir dari tokens
        if not important_tokens:
            important_tokens = [stemmed_tokens[-1]]

        return important_tokens[0]  # Kembalikan kata penting pertama yang ditemukan

    except Exception as e:
        # Tangani kesalahan dengan mencetak pesan kesalahan
        print("Error:", str(e))
        return None

if __name__ == "__main__":
    # Pastikan argumen keyword disediakan
    if len(sys.argv) != 2:
        print("Usage: python processingNLP.py <temp_file>")
        sys.exit(1)

    # Baca nama file sementara dari argumen pertama script
    temp_file = sys.argv[1]

    try:
        # Baca data dari file sementara
        with open(temp_file, 'r', encoding='utf-8') as file:
            data = json.load(file)

        # Hapus file sementara setelah selesai membaca
        os.remove(temp_file)

        keyword = data['keyword']
        important_keywords = data['important_keywords']

        # Jalankan fungsi tokenize_input
        processed_keyword = tokenize_input(keyword, important_keywords)

        # Ganti kata-kata dengan sinonim jika perlu
        replaced_keyword = replace_keyword(processed_keyword)

        # Cetak hasil pemrosesan untuk diambil oleh PHP
        if replaced_keyword is not None:
            print(replaced_keyword)
        else:
            print("")
    except Exception as e:
        print("Error:", str(e))
        sys.exit(1)
